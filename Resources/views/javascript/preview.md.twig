bsw.configure({
    data: {
        preview_columns: {{ preview.columnsJson|raw }},
        preview_list: {{ preview.listJson|raw }},
        preview_selected_row: [],
        preview_dynamic_refresh: {{ preview.dynamic }},
        preview_url: '{{ scaffold.url|raw }}',
        preview_pagination_data: {{ preview.pageJson|raw }},
        previewPageSize: {{ preview.page.pageSize }},
        preview_pagination_size_options: {{ preview.pageSizeOptionsJson|raw }},
        preview_page_number: 1
    },
    watch: {
        previewPageSize(pageSize) {
            location.href = this.preview_get_url(null, {page: 1, page_size: pageSize});
        }
    },
    method: {
        preview_selected_change(selectedRow) {
            this.preview_selected_row = selectedRow;
        },
        preview_get_url(url, params={}) {
            url = url || this.preview_url;
            return bsw.setParams(Object.assign({page: this.preview_page_number}, params), url);
        },
        preview_pagination(page, pageSize) {
            this.pagination(this.preview_get_url(), page);
        },
        preview_pagination_refresh() {
            this.pagination(this.preview_get_url());
        },
        preview_sort_data(pagination, filters, sorter) {
            let url = this.preview_get_url();
            url = bsw.unsetParamsBeginWith(['sequence'], url);
            if (typeof sorter.field !== 'undefined') {
                let key = bsw.humpToUnder(sorter.field);
                key = `sequence[${key}]`;
                url = bsw.setParams({[key]: sorter.order}, url);
            }
            this.pagination(url);
        },
        preview_image_change() {
            let that = this;
            let doChecker = setInterval(() => checker(), 50);
            let checker = function() {
                let total = $('img').length;
                let done = 0;
                $('img').each(function() {
                    done += (this.complete ? 1 : 0);
                });
                let tmp = that.preview_columns[0].fixed;
                that.preview_columns[0].fixed = !tmp;
                that.preview_columns[0].fixed = tmp;
                if ((done >= total) || total === 0) {
                    clearInterval(doChecker);
                }
            }
        },
    },
    logic: {
        preview_resize(v) {
            let upper = {{ preview.scroll }};
            let columns = v.preview_columns;
            let fixed = [];
            for (let index in columns) {
                if (!columns.hasOwnProperty(index)) {
                    continue;
                }
                if (columns[index].fixed) {
                    fixed[index] = columns[index].fixed;
                }
            }
            let resize = function() {
                let width = $('.ant-table-wrapper').width();
                let free = ((width < 720) || (width > upper));
                for (let index in fixed) {
                    if (!fixed.hasOwnProperty(index)) {
                        continue;
                    }
                    columns[index].fixed = free ? false : fixed[index];
                }
            };
            resize();
            $(window).resize(() => resize());
        },
        preview_image_change(v) {
            v.preview_image_change();
        },
        preview_dynamic_refresh(v) {
            if (v.preview_dynamic_refresh < 3) {
                return;
            }
            setInterval(function() {
                v.no_loading_once = true;
                v.preview_pagination_refresh();
            }, v.preview_dynamic_refresh * 1000);
        }
    }
});